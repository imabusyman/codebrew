%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2350 421
%%HiResBoundingBox: 0 0 2349.1199 420.95999
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2349.1199 420.95999 re
W
q
[0.24 0 0 -0.24 0 420.95999] cm
q
0 0 9787.5 1753.125 re
W*
q
[51.732761 0 0 51.776237 160.49736 217.46021] cm
q
12.96 18.5 m
11.72 19.620001 10.06 20.200001 8.2 20.200001 c
4.28 20.200001 0.9 17.26 0.9 13.000001 c
0.9 8.740002 4.28 5.800001 8.2 5.800001 c
10.04 5.800001 11.68 6.400001 12.879999 7.460001 c
11.119999 9.440001 l
10.379999 8.92 9.379999 8.540001 8.359999 8.540001 c
5.839999 8.540001 3.939999 10.400001 3.939999 13.000001 c
3.939999 15.600001 5.839999 17.460001 8.359999 17.460001 c
9.419998 17.460001 10.459999 17.060001 11.219999 16.460001 c
12.96 18.5 l
h
21.82 5.8 m
25.719999 5.8 29.08 8.74 29.08 13 c
29.08 17.26 25.719999 20.200001 21.82 20.200001 c
17.92 20.200001 14.56 17.26 14.56 13.000001 c
14.56 8.740002 17.92 5.800001 21.82 5.800001 c
21.82 5.8 l
h
21.82 17.459999 m
24.18 17.459999 26.039999 15.599999 26.039999 12.999999 c
26.039999 10.399999 24.179998 8.539999 21.82 8.539999 c
19.460001 8.539999 17.6 10.399999 17.6 12.999999 c
17.6 15.599999 19.460001 17.459999 21.82 17.459999 c
h
36.18 6 m
40.16 6 43.279999 9.12 43.279999 12.92 c
43.279999 16.880001 40.16 20 36.18 20 c
31.18 20 l
31.18 6 l
36.18 6 l
h
36.16 17.24 m
38.84 17.24 40.279999 15.299999 40.279999 12.92 c
40.279999 10.7 38.84 8.76 36.16 8.76 c
34.099998 8.76 l
34.099998 17.24 l
36.16 17.24 l
h
48.200001 17.32 m
54.120003 17.32 l
54.120003 20 l
47.800003 20 l
45.280003 20 l
45.280003 6 l
48.200005 6 l
53.940002 6 l
53.940002 8.68 l
48.200005 8.68 l
48.200005 11.64 l
52.540005 11.64 l
52.540005 14.280001 l
48.200005 14.280001 l
48.200005 17.32 l
48.200001 17.32 l
h
W
[53.220003 0 0 14.400002 0.9 5.8] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.255 mul 0.725 add
1 index 1 exp 0.404 mul 0.537 add
2 index 1 exp 0.353 mul 0.278 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[50.884796 0 0 50.927555 -4978.4658 -4828.7656] cm
q
197 101 m
189.60001 124 l
189.57915 124.070122 189.55293 124.138191 189.52139 124.204208 c
189.48985 124.27021 189.45335 124.333366 189.41191 124.393661 c
189.37047 124.453957 189.32458 124.510651 189.27425 124.563744 c
189.22391 124.616844 189.16975 124.665695 189.11177 124.710304 c
189.05379 124.754913 188.99268 124.794731 188.92845 124.829758 c
188.86421 124.864784 188.79764 124.894592 188.72874 124.919182 c
188.65984 124.943771 188.58943 124.962837 188.51753 124.976387 c
188.44565 124.989944 188.37314 124.99781 188.3 125 c
187.90001 125 l
187.85535 124.985924 187.81149 124.969658 187.76845 124.951187 c
187.72543 124.932724 187.68346 124.912155 187.64249 124.889473 c
187.60152 124.866791 187.5618 124.842117 187.52332 124.815453 c
187.48482 124.788788 187.44777 124.760269 187.41216 124.729889 c
187.37653 124.699501 187.3425 124.667404 187.31009 124.633606 c
187.27769 124.599815 187.24709 124.564484 187.21823 124.527611 c
187.18936 124.490738 187.16241 124.452515 187.13739 124.412949 c
187.11235 124.373375 187.08937 124.332657 187.06845 124.290787 c
187.0475 124.248901 187.0287 124.206078 187.01205 124.162315 c
186.99541 124.118546 186.981 124.074059 186.96883 124.028854 c
186.95663 123.983643 186.94675 123.937935 186.93916 123.891731 c
186.93158 123.845535 186.92632 123.799072 186.9234 123.75235 c
186.92046 123.705612 186.91986 123.658844 186.92162 123.612053 c
186.92339 123.565269 186.92749 123.518692 186.93391 123.472321 c
186.94035 123.425934 186.94908 123.37999 186.96011 123.334496 c
186.97118 123.288994 186.98447 123.244164 187.00002 123.199997 c
194.40001 100.199997 l
194.40315 100.14724 194.40926 100.094841 194.41832 100.042786 c
194.42738 99.990723 194.43936 99.939339 194.45425 99.888634 c
194.46913 99.837921 194.48683 99.788216 194.50735 99.739517 c
194.52788 99.690819 194.55107 99.643425 194.57695 99.597351 c
194.60284 99.551277 194.63124 99.506813 194.66216 99.463951 c
194.69305 99.421089 194.72629 99.380112 194.76186 99.341019 c
194.79742 99.301926 194.83507 99.264961 194.87482 99.230125 c
194.91457 99.195297 194.95615 99.162819 194.99956 99.132698 c
195.04298 99.102577 195.08797 99.075005 195.13452 99.049988 c
195.18106 99.024956 195.22887 99.002632 195.27794 98.983017 c
195.32703 98.963402 195.37704 98.946625 195.42801 98.932686 c
195.47899 98.918732 195.53058 98.9077 195.58279 98.89959 c
195.63503 98.891487 195.68753 98.886353 195.74033 98.884193 c
195.79314 98.882034 195.8459 98.882866 195.89862 98.886681 c
195.95132 98.890503 196.00365 98.897278 196.05559 98.907013 c
196.10754 98.916756 196.15877 98.92939 196.20926 98.944931 c
196.25978 98.960472 196.30925 98.978813 196.35768 98.999962 c
196.40611 99.021103 196.4532 99.044914 196.49893 99.071396 c
196.54468 99.09787 196.58878 99.126846 196.63123 99.158318 c
196.67368 99.189789 196.71422 99.223557 196.75285 99.259613 c
196.79147 99.29567 196.82794 99.333794 196.86226 99.373985 c
196.89658 99.414177 196.92851 99.456177 196.95807 99.499985 c
196.98763 99.543785 197.01462 99.589119 197.03905 99.635979 c
197.06348 99.682846 197.08519 99.730934 197.10416 99.780258 c
197.12314 99.82959 197.13927 99.879829 197.15256 99.930977 c
197.16585 99.982124 197.17621 100.033859 197.18364 100.086182 c
197.19107 100.138504 197.19553 100.191078 197.19701 100.243904 c
197.19849 100.29673 197.19698 100.349472 197.19247 100.402122 c
197.18797 100.454773 197.18053 100.507011 197.1701 100.55883 c
197.1597 100.610634 197.14639 100.66169 197.13019 100.711998 c
197.11398 100.762299 197.095 100.811531 197.07326 100.859688 c
197.05148 100.907837 197.02705 100.954613 197 101 c
h
182.7 119.5 m
172.2 112.5 l
182.89999 104.400002 l
182.97862 104.341057 183.05415 104.278397 183.12659 104.212029 c
183.19904 104.14566 183.26805 104.07589 183.33363 104.002731 c
183.39923 103.929588 183.46109 103.853394 183.5192 103.774162 c
183.57729 103.694931 183.63138 103.613045 183.68144 103.528496 c
183.73151 103.443954 183.77731 103.357162 183.81883 103.26812 c
183.86037 103.17907 183.89743 103.088196 183.93002 102.995506 c
183.96263 102.902824 183.99063 102.808762 184.01399 102.713326 c
184.03735 102.617889 184.05597 102.521545 184.06987 102.424278 c
184.08377 102.327019 184.09286 102.229309 184.09715 102.131149 c
184.10144 102.032982 184.10091 101.934845 184.09555 101.836731 c
184.09021 101.738632 184.08008 101.641029 184.06514 101.543922 c
184.0502 101.446808 184.03053 101.350655 184.00615 101.255478 c
183.98178 101.160301 183.95279 101.066544 183.91919 100.974213 c
183.88559 100.881874 183.84753 100.791412 183.80504 100.702812 c
183.76256 100.614227 183.71584 100.527931 183.66489 100.443924 c
183.61392 100.359924 183.55896 100.278618 183.5 100.200012 c
183.44106 100.121414 183.37839 100.045891 183.31201 99.97345 c
183.24564 99.901001 183.17587 99.831978 183.10271 99.76638 c
183.02957 99.70079 182.95338 99.638939 182.87416 99.580841 c
182.79494 99.522736 182.71304 99.468651 182.62849 99.418587 c
182.54395 99.36853 182.45715 99.322731 182.36812 99.281197 c
182.27907 99.23967 182.1882 99.202606 182.0955 99.169998 c
182.00284 99.137398 181.90878 99.109421 181.81335 99.08606 c
181.71791 99.062698 181.62155 99.044067 181.52428 99.030167 c
181.42702 99.016273 181.32932 99.007179 181.23116 99.002884 c
181.13298 98.998589 181.03484 98.999115 180.93674 99.004456 c
180.83864 99.009811 180.74103 99.019958 180.64392 99.034897 c
180.5468 99.049835 180.45065 99.069496 180.35547 99.093872 c
180.2603 99.118263 180.16653 99.147255 180.0742 99.180847 c
179.98187 99.214447 179.8914 99.252487 179.8028 99.29496 c
179.7142 99.337448 179.6279 99.384171 179.5439 99.435135 c
179.4599 99.486099 179.3786 99.541054 179.29999 99.599998 c
165.299988 110.299995 l
165.252548 110.336426 165.206223 110.374237 165.161041 110.413429 c
165.11586 110.452637 165.071884 110.493149 165.029129 110.534981 c
164.986374 110.576813 164.944901 110.619881 164.904724 110.664192 c
164.864532 110.708504 164.825714 110.753975 164.788254 110.800606 c
164.750793 110.847244 164.714752 110.894951 164.68013 110.943741 c
164.645523 110.992523 164.612396 111.042297 164.580765 111.093071 c
164.549133 111.143845 164.519043 111.195511 164.490509 111.248077 c
164.46196 111.300644 164.435028 111.354019 164.409683 111.408203 c
164.384338 111.462379 164.360626 111.517273 164.338562 111.572876 c
164.316483 111.628471 164.296097 111.684685 164.27739 111.741501 c
164.258698 111.798317 164.241699 111.855644 164.226425 111.913483 c
164.211151 111.971313 164.197617 112.029549 164.185822 112.088196 c
164.174042 112.146843 164.164017 112.205788 164.155746 112.26503 c
164.147476 112.324272 164.140991 112.383713 164.136276 112.443336 c
164.131561 112.502968 164.128647 112.562683 164.127502 112.62249 c
164.126373 112.682297 164.127029 112.742088 164.129471 112.801857 c
164.131927 112.861633 164.136154 112.921272 164.142151 112.980782 c
164.148163 113.040298 164.155945 113.099579 164.165497 113.158623 c
164.175064 113.217674 164.186371 113.27639 164.199448 113.33477 c
164.212509 113.393143 164.22731 113.451073 164.243835 113.50856 c
164.260376 113.566048 164.27861 113.622993 164.298523 113.67939 c
164.318466 113.735786 164.340057 113.791534 164.363327 113.846634 c
164.386597 113.901741 164.411499 113.9561 164.438034 114.009727 c
164.464554 114.063339 164.492645 114.116119 164.522324 114.168053 c
164.552002 114.219986 164.583206 114.270988 164.615936 114.32106 c
164.648666 114.371124 164.682861 114.420166 164.718521 114.468185 c
164.754181 114.516212 164.79126 114.563126 164.829742 114.608925 c
164.86821 114.654732 164.90802 114.699348 164.949158 114.742767 c
164.990295 114.786186 165.0327 114.828346 165.076355 114.869232 c
165.120026 114.910126 165.164871 114.949677 165.210892 114.987885 c
165.256912 115.026085 165.304031 115.062881 165.352264 115.098259 c
165.400497 115.133644 165.449738 115.167557 165.499985 115.199997 c
179.49998 124.5 l
179.58105 124.570412 179.66568 124.636284 179.75383 124.697617 c
179.84198 124.758949 179.93317 124.815384 180.02739 124.86692 c
180.12161 124.918457 180.21831 124.964798 180.3175 125.005959 c
180.4167 125.047104 180.51782 125.082825 180.62085 125.113121 c
180.72388 125.14341 180.82823 125.168098 180.93391 125.187187 c
181.0396 125.206276 181.146 125.21965 181.2531 125.227303 c
181.36023 125.234955 181.46745 125.236862 181.57477 125.233009 c
181.6821 125.229156 181.78891 125.219574 181.8952 125.204254 c
182.0015 125.188927 182.10666 125.167961 182.21068 125.141342 c
182.31473 125.114723 182.41705 125.082611 182.51764 125.044998 c
182.61824 125.007393 182.71652 124.964508 182.81248 124.916351 c
182.90848 124.868195 183.0016 124.815033 183.09187 124.756874 c
183.18216 124.698715 183.26906 124.635887 183.35258 124.56839 c
183.43613 124.500893 183.51579 124.429123 183.59161 124.353065 c
183.66743 124.277023 183.73898 124.197136 183.80623 124.113403 c
183.87347 124.029671 183.93604 123.942574 183.99393 123.852127 c
184.05182 123.761673 184.10471 123.668381 184.15257 123.572243 c
184.20044 123.47612 184.24303 123.377701 184.28032 123.277 c
184.31763 123.176292 184.34943 123.073875 184.37572 122.969757 c
184.40204 122.865639 184.42268 122.760414 184.43768 122.654076 c
184.45268 122.547737 184.46194 122.440903 184.46547 122.333572 c
184.46899 122.226242 184.46678 122.119034 184.4588 122.01194 c
184.45082 121.904846 184.43712 121.798492 184.41771 121.692871 c
184.39832 121.58725 184.37331 121.482971 184.34271 121.380028 c
184.3121 121.277084 184.27608 121.176086 184.23463 121.077019 c
184.19318 120.977951 184.14655 120.881386 184.09471 120.787323 c
184.04289 120.69326 183.98618 120.602249 183.92458 120.514275 c
183.86299 120.4263 183.79688 120.341881 183.72621 120.261017 c
183.65555 120.180145 183.58075 120.103294 183.50185 120.030457 c
183.42291 119.957619 183.34033 119.889214 183.25407 119.825241 c
183.16782 119.761269 183.07838 119.702103 182.98576 119.647743 c
182.89316 119.593384 182.7979 119.544136 182.7 119.5 c
h
218.7 108.800003 m
204.7 99.5 l
204.61812 99.452232 204.53416 99.408447 204.44814 99.368637 c
204.36209 99.328827 204.27437 99.293175 204.18497 99.261681 c
204.09557 99.230186 204.00487 99.202995 203.91289 99.180107 c
203.82089 99.157211 203.72804 99.13871 203.63431 99.124619 c
203.54057 99.110527 203.44638 99.100899 203.35173 99.095734 c
203.25706 99.090569 203.16238 99.089897 203.06767 99.093704 c
202.97295 99.097511 202.87863 99.105797 202.78471 99.118553 c
202.69077 99.131302 202.59766 99.148468 202.50536 99.170052 c
202.41306 99.191628 202.32198 99.217522 202.23213 99.247734 c
202.14227 99.277939 202.05406 99.312332 201.96747 99.350906 c
201.88089 99.389481 201.79633 99.432068 201.71376 99.478661 c
201.63123 99.525253 201.55107 99.575638 201.4733 99.629829 c
201.39552 99.684021 201.32047 99.741768 201.24815 99.80307 c
201.17586 99.864372 201.10661 99.928955 201.04044 99.996819 c
200.97426 100.06469 200.91144 100.135536 200.85197 100.209351 c
200.79253 100.283173 200.73669 100.359642 200.68448 100.438751 c
200.63228 100.51786 200.58392 100.599266 200.53941 100.682968 c
200.49492 100.766663 200.45448 100.85228 200.41809 100.939812 c
200.3817 101.027344 200.34953 101.116394 200.32159 101.206978 c
200.29366 101.297562 200.27005 101.389259 200.25081 101.482079 c
200.23155 101.57489 200.21674 101.668411 200.20636 101.762634 c
200.19598 101.85685 200.19008 101.951355 200.18864 102.046135 c
200.18723 102.140915 200.19028 102.23555 200.19783 102.330032 c
200.20535 102.424522 200.21735 102.518448 200.2338 102.611801 c
200.25024 102.705154 200.27106 102.797523 200.29625 102.888901 c
200.32147 102.980286 200.35094 103.070274 200.38467 103.158859 c
200.41841 103.247444 200.45625 103.334236 200.49821 103.419235 c
200.54018 103.504234 200.58606 103.587059 200.63586 103.667709 c
200.68568 103.74836 200.7392 103.826469 200.79642 103.902046 c
200.85362 103.977615 200.91429 104.050316 200.97839 104.120148 c
201.0425 104.18998 201.10977 104.256615 201.18019 104.320061 c
201.25063 104.383514 201.3239 104.443497 201.39999 104.5 c
211.89999 111.5 l
201.2 119.599998 l
201.1214 119.658958 201.04588 119.721626 200.97343 119.787994 c
200.90099 119.854362 200.83195 119.924126 200.76636 119.997276 c
200.70079 120.070435 200.63895 120.146629 200.58084 120.225861 c
200.52272 120.305092 200.46863 120.386978 200.41856 120.471519 c
200.3685 120.556061 200.32272 120.64286 200.2812 120.731903 c
200.23965 120.820946 200.20258 120.911812 200.16997 121.004494 c
200.13737 121.097183 200.10941 121.191246 200.08604 121.286682 c
200.06268 121.382118 200.04404 121.478462 200.03014 121.575729 c
200.01625 121.672997 200.00717 121.770714 200.00288 121.868881 c
199.99858 121.967033 199.9991 122.065155 200.00443 122.163254 c
200.00978 122.261375 200.01993 122.358986 200.03488 122.456093 c
200.0498 122.553207 200.06946 122.649353 200.09384 122.744522 c
200.11824 122.839706 200.14723 122.933464 200.18083 123.025795 c
200.21442 123.118126 200.25246 123.208588 200.29494 123.29718 c
200.33743 123.38578 200.38416 123.472076 200.43512 123.556084 c
200.48608 123.640091 200.54105 123.72139 200.59999 123.799988 c
200.65895 123.878593 200.72162 123.954124 200.78799 124.026573 c
200.85435 124.099022 200.92412 124.168037 200.99725 124.233627 c
201.07042 124.299225 201.14662 124.361076 201.22585 124.419174 c
201.30508 124.47728 201.38696 124.531357 201.4715 124.581413 c
201.55605 124.631477 201.64285 124.677277 201.73189 124.718811 c
201.82094 124.760345 201.9118 124.797409 202.00449 124.830009 c
202.09718 124.862617 202.19124 124.890602 202.28668 124.913971 c
202.38213 124.937332 202.47847 124.955956 202.57573 124.969849 c
202.673 124.983749 202.77072 124.992844 202.86888 124.997139 c
202.96704 125.001434 203.06516 125.0009 203.16325 124.995544 c
203.26138 124.990204 203.35899 124.980064 203.4561 124.965126 c
203.55322 124.950188 203.64935 124.930519 203.74452 124.906128 c
203.83971 124.881752 203.93346 124.85276 204.02579 124.81916 c
204.11812 124.785568 204.20859 124.74752 204.29718 124.705032 c
204.38579 124.66256 204.47209 124.615837 204.55609 124.564873 c
204.64011 124.513916 204.72141 124.458954 204.8 124.400002 c
218.8 113.700005 l
218.84811 113.664536 218.89511 113.62767 218.94099 113.589401 c
218.98691 113.551125 219.03162 113.51152 219.07515 113.470573 c
219.11868 113.429626 219.16095 113.387421 219.20195 113.343956 c
219.24297 113.300484 219.28265 113.255829 219.321 113.209991 c
219.35934 113.164146 219.39627 113.117203 219.43181 113.06916 c
219.46735 113.021111 219.50142 112.972038 219.53403 112.921951 c
219.56664 112.871864 219.59772 112.820854 219.62726 112.768921 c
219.65681 112.716972 219.6848 112.664192 219.7112 112.61058 c
219.73759 112.556961 219.76237 112.502602 219.78552 112.44751 c
219.80867 112.392403 219.83015 112.336662 219.84998 112.280289 c
219.8698 112.223915 219.88792 112.166992 219.90434 112.109535 c
219.92076 112.052078 219.93546 111.994179 219.94841 111.935837 c
219.96136 111.877495 219.97256 111.818825 219.98203 111.759819 c
219.99147 111.700806 219.99916 111.641563 220.00507 111.582092 c
220.01097 111.522629 220.01511 111.463036 220.01746 111.40332 c
220.01981 111.343605 220.02037 111.283875 220.01915 111.224121 c
220.01793 111.164375 220.01494 111.104713 220.01016 111.045135 c
220.00536 110.985573 219.99879 110.926201 219.99046 110.86702 c
219.98213 110.807838 219.97203 110.748962 219.96017 110.690392 c
219.94832 110.631813 219.93474 110.573647 219.9194 110.515884 c
219.90407 110.458115 219.88704 110.400856 219.86829 110.344116 c
219.84953 110.287369 219.8291 110.231232 219.80699 110.175713 c
219.7849 110.120193 219.76115 110.065376 219.73578 110.011269 c
219.7104 109.957169 219.68343 109.90387 219.65486 109.851372 c
219.6263 109.798874 219.59619 109.747276 219.56453 109.696579 c
219.53288 109.645889 219.49976 109.596184 219.46513 109.547462 c
219.43051 109.498749 219.39447 109.451111 219.35701 109.404556 c
219.31955 109.357994 219.28073 109.312599 219.24055 109.268356 c
219.20036 109.224121 219.15889 109.181122 219.11615 109.139351 c
219.07341 109.097588 219.02945 109.057137 218.98428 109.018005 c
218.93912 108.978874 218.89282 108.941124 218.84538 108.904755 c
218.79797 108.868393 218.74951 108.833473 218.7 108.800003 c
h
W
[55.892764 0 0 26.351946 164.126997 98.883036] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000011 def
/yMin -0.000038 def
/xMax 1.000011 def
/yMax 1.000071 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0.000011 1.000011 0 axialSH
Q
Q
q
[53.210842 0 0 53.255558 6238.8018 198.22903] cm
q
14.92 12.24 m
16.4 12.639999 17.799999 13.96 17.799999 15.9 c
17.799999 18.439999 16.199999 20 12.719999 20 c
7.199999 20 l
7.199999 6 l
12.419999 6 l
15.32 6 16.779999 7.64 16.779999 9.520001 c
16.779999 11 15.819999 11.84 14.919999 12.240001 c
14.92 12.24 l
h
12.14 8.56 m
10.120001 8.56 l
10.120001 11.38 l
12.140001 11.38 l
13.380001 11.38 13.880001 10.8 13.880001 9.96 c
13.880001 9.06 13.300001 8.56 12.140001 8.56 c
12.14 8.56 l
h
12.56 17.440001 m
14.160001 17.440001 14.88 16.780001 14.88 15.540001 c
14.88 14.480001 14.16 13.740001 12.440001 13.740001 c
10.120001 13.740001 l
10.120001 17.440001 l
12.560001 17.440001 l
12.56 17.440001 l
h
30.719999 20 m
27.619999 20 l
24.639999 15.34 l
24.599998 15.34 l
22.619999 15.34 l
22.619999 20 l
19.699999 20 l
19.699999 6 l
24.599998 6 l
27.739998 6 29.779999 7.9 29.779999 10.76 c
29.779999 12.66 28.859999 14.08 27.299999 14.8 c
30.719999 20 l
h
22.620001 8.68 m
22.620001 12.82 l
24.42 12.82 l
25.860001 12.82 26.860001 12.259999 26.860001 10.76 c
26.860001 9.280001 25.860001 8.68 24.42 8.68 c
22.620001 8.68 l
h
35.439999 17.32 m
41.360001 17.32 l
41.360001 20 l
35.040001 20 l
32.52 20 l
32.52 6 l
35.440002 6 l
41.18 6 l
41.18 8.68 l
35.440002 8.68 l
35.440002 11.64 l
39.780003 11.64 l
39.780003 14.280001 l
35.440002 14.280001 l
35.440002 17.32 l
35.439999 17.32 l
h
62.799999 6 m
58.200001 20 l
56.100002 20 l
52.820004 11.14 l
49.560005 20 l
47.460007 20 l
42.860008 6 l
45.94001 6 l
48.62001 14.3 l
51.680012 6 l
53.980011 6 l
57.040012 14.3 l
59.720013 6 l
62.800011 6 l
62.799999 6 l
h
W
[55.600011 0 0 14 7.200003 6] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
