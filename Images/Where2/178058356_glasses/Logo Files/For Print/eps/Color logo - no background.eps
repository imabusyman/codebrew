%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2380 858
%%HiResBoundingBox: 0 0 2379.1199 858
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2379.1199 858 re
W
q
[0.24 0 0 -0.24 0 858] cm
q
0 0 9909.375 3575 re
W*
q
[38.497261 0 0 38.514484 3029.8162 -318.07614] cm
/DeviceRGB {} CS
[0.3569 0.1882 0.0863] SC
/DeviceRGB {} cs
[0.3569 0.1882 0.0863] sc
98.535004 33.738998 m
98.535004 33.738998 98.867004 25.995998 98.583 25.709 c
98.300003 25.423 71.833 26.281 71.833 26.281 c
50 26.568001 l
28.166 26.282001 l
28.166 26.282001 1.702 25.424002 1.417 25.710001 c
1.133 25.997002 1.467 33.740002 1.467 33.740002 c
1.467 33.740002 1.009 33.130001 2.842 36.257 c
4.672 39.382 4.825 54.105 12.988 56.622002 c
21.15 59.142002 30.151001 59.295002 35.793999 56.241001 c
35.793999 56.241001 43.116997 52.045002 45.862999 41.825001 c
45.862999 41.825001 46.617001 36.926003 50 36.868999 c
53.382999 36.925999 54.140999 41.825001 54.140999 41.825001 c
56.886002 52.043999 64.209999 56.240002 64.209999 56.240002 c
69.852997 59.294003 78.854996 59.140003 87.014999 56.621002 c
95.18 54.106003 95.330002 39.384003 97.163002 36.256004 c
98.988998 33.129002 98.535004 33.738998 98.535004 33.738998 c
h
34.647999 53.952 m
32.131001 55.477001 27.781998 56.696999 17.636999 55.168999 c
7.492 53.647999 7.34 41.287998 8.331 34.958 c
9.324 28.625999 24.122002 29.465 24.122002 29.465 c
40.675003 29.85 41.360001 35.034 41.360001 35.034 c
43.727001 44.798 37.167 52.428001 34.647999 53.952 c
h
82.361 55.168999 m
72.216003 56.696999 67.865997 55.477997 65.350998 53.952 c
62.834 52.428001 56.272999 44.798 58.639 35.035 c
58.639 35.035 59.325001 29.848999 75.874001 29.466999 c
75.874001 29.466999 90.676003 28.627998 91.667999 34.959999 c
92.656998 41.290001 92.507004 53.647999 82.361 55.168999 c
h
94.336998 27.721001 m
94.336998 27.721001 82.121994 28.064001 70.492996 28.229 c
60.487999 28.371 50.908001 28.358 50 28.330999 c
49.091 28.358 39.514999 28.372999 29.509001 28.229 c
17.878002 28.061001 5.661001 27.721001 5.661001 27.721001 c
5.053001 26.568001 5.967001 26.568001 5.967001 26.568001 c
8.132 26.923 48.298 27.280001 50 27.294001 c
51.703999 27.280001 91.865005 26.922001 94.031998 26.567001 c
94.031998 26.568001 94.945999 26.568001 94.336998 27.721001 c
h
f
Q
q
[79.627518 0 0 79.663139 267.75327 1694.6798] cm
/DeviceRGB {} CS
[0.3569 0.1882 0.0863] SC
/DeviceRGB {} cs
[0.3569 0.1882 0.0863] sc
21.200001 4.88 m
21.540001 4.88 21.800001 5.14 21.800001 5.46 c
21.800001 16.58 l
21.800001 18.459999 20.260002 20 18.360001 20 c
16.480001 20 14.92 18.459999 14.940001 16.58 c
14.940001 8.32 l
14.940001 8.02 14.68 7.76 14.38 7.76 c
14.08 7.76 13.84 8.02 13.84 8.32 c
13.84 16.56 l
13.84 17.779999 13.18 18.92 12.12 19.539999 c
10.54 20.459999 8.48 19.919998 7.44 18.32 c
0.2 7.06 l
-0.2 6.36 0.02 5.48 0.72 5.079999 c
1.36 4.699999 2.28 4.839999 2.68 5.579999 c
9.88 16.74 l
10 16.959999 10.28 17.219999 10.66 17.039999 c
10.84 16.959999 10.94 16.799999 10.96 16.58 c
10.96 8.32 l
10.96 6.42 12.5 4.88 14.38 4.88 c
16.280001 4.88 17.82 6.42 17.82 8.32 c
17.82 16.58 l
17.82 16.9 17.559999 17.16 17.219999 17.16 c
16.9 17.16 16.619999 16.9 16.619999 16.58 c
16.619999 8.32 l
16.619999 7.08 15.619999 6.08 14.379999 6.08 c
13.159999 6.08 12.139999 7.08 12.139999 8.32 c
12.139999 16.58 l
12.139999 17.200001 11.799999 17.780001 11.28 18.08 c
10.34 18.620001 9.34 18.120001 8.86 17.4 c
1.64 6.179999 l
1.56 6.06 1.46 5.96 1.28 6.079999 c
1.14 6.179999 1.16 6.339999 1.22 6.42 c
8.44 17.66 l
9.139999 18.74 10.48 19.119999 11.52 18.52 c
12.219999 18.120001 12.639999 17.380001 12.639999 16.58 c
12.639999 8.32 l
12.639999 7.36 13.419999 6.58 14.379999 6.58 c
15.339999 6.58 16.119999 7.36 16.119999 8.32 c
16.119999 16.58 l
16.119999 17.799999 17.139999 18.82 18.359999 18.82 c
19.599998 18.82 20.599998 17.799999 20.599998 16.58 c
20.599998 5.46 l
20.599998 5.14 20.879999 4.88 21.199999 4.88 c
21.200001 4.88 l
h
24 4.88 m
24.34 4.88 24.620001 5.16 24.620001 5.5 c
24.620001 19.4 l
24.620001 19.74 24.34 20 24 20 c
23.68 20 23.4 19.74 23.4 19.4 c
23.4 5.5 l
23.4 5.16 23.68 4.88 24 4.88 c
h
36.32 4.88 m
36.66 4.88 36.919998 5.16 36.919998 5.5 c
36.919998 11.28 l
36.919998 12.24 36.16 13.02 35.199997 13.06 c
35.199997 19.4 l
35.199997 19.74 34.919998 20 34.599998 20 c
34.259998 20 33.98 19.74 33.98 19.4 c
33.98 13.06 l
26.9 13.06 l
26.6 13.06 26.34 13.299999 26.34 13.62 c
26.34 19.4 l
26.34 19.74 26.08 20 25.74 20 c
25.4 20 25.119999 19.74 25.119999 19.4 c
25.119999 13.62 l
25.119999 12.639999 25.919998 11.84 26.9 11.84 c
33.98 11.84 l
33.98 5.5 l
33.98 5.16 34.259998 4.88 34.599998 4.88 c
34.919998 4.88 35.199997 5.16 35.199997 5.5 c
35.199997 11.84 l
35.479996 11.8 35.699997 11.56 35.699997 11.28 c
35.699997 5.5 l
35.699997 5.16 35.979996 4.88 36.319996 4.88 c
36.32 4.88 l
h
42.02 4.88 m
49.440002 4.88 l
50.240002 4.88 50.900002 5.54 50.900002 6.34 c
50.900002 7.14 50.280003 7.82 49.480003 7.82 c
42.020004 7.82 l
41.720005 7.82 41.460003 8.06 41.460003 8.38 c
41.460003 8.68 41.720001 8.940001 42.020004 8.940001 c
42.360004 8.940001 42.640003 9.200001 42.640003 9.540001 c
42.640003 9.880001 42.360004 10.160001 42.020004 10.160001 c
41.040005 10.160001 40.260006 9.360001 40.260006 8.380001 c
40.260006 7.400002 41.040005 6.600001 42.020004 6.600001 c
49.440002 6.600001 l
49.580002 6.600001 49.680004 6.480001 49.680004 6.340001 c
49.680004 6.200001 49.580006 6.100001 49.440002 6.100001 c
42.020004 6.100001 l
40.760006 6.100001 39.740005 7.120001 39.740005 8.380001 c
39.740005 9.640001 40.760006 10.660001 42.020004 10.660001 c
47.400005 10.660001 l
48.380005 10.660001 49.180004 11.460001 49.180004 12.460001 c
49.180004 13.440001 48.380005 14.220001 47.400005 14.220001 c
42.020004 14.220001 l
40.760006 14.220001 39.740005 15.240002 39.740005 16.500002 c
39.740005 17.760002 40.760006 18.780003 42.020004 18.780003 c
50.280006 18.780003 l
50.620007 18.780003 50.900005 19.060003 50.900005 19.400003 c
50.900005 19.740004 50.620007 20.000004 50.280006 20.000004 c
42.020004 20.000004 l
40.080006 20.000004 38.520004 18.440004 38.520004 16.500004 c
38.520004 14.580004 40.080006 13.000004 42.020004 13.000004 c
47.400005 13.000004 l
47.720005 13.000004 47.960007 12.760004 47.960007 12.460004 c
47.960007 12.120004 47.720005 11.880004 47.400005 11.880004 c
42.020004 11.880004 l
40.100006 11.880004 38.520004 10.300004 38.520004 8.380004 c
38.520004 6.440004 40.100006 4.880004 42.020004 4.880004 c
42.02 4.88 l
h
42.02 14.74 m
47.400002 14.74 l
47.740002 14.74 48.02 15 48.02 15.34 c
48.02 15.68 47.740002 15.96 47.400002 15.96 c
42.02 15.96 l
41.720001 15.96 41.459999 16.200001 41.459999 16.5 c
41.459999 16.82 41.719997 17.059999 42.02 17.059999 c
42.360001 17.059999 42.619999 17.34 42.619999 17.68 c
42.619999 18 42.360001 18.280001 42.02 18.280001 c
41.040001 18.280001 40.240002 17.480001 40.240002 16.5 c
40.240002 15.519999 41.040001 14.74 42.02 14.74 c
h
53.099998 4.88 m
60.379997 4.88 l
62.859997 4.9 64.860001 6.94 64.860001 9.42 c
64.860001 11.74 63.080002 13.66 60.82 13.9 c
64.440002 17.5 l
64.980003 18.040001 64.980003 19.040001 64.440002 19.58 c
63.900002 20.119999 62.960003 20.16 62.400002 19.6 c
61.880001 19.059999 59.880001 17.08 59.880001 17.08 c
59.639999 16.84 59.639999 16.459999 59.880001 16.219999 c
60.120003 15.98 60.5 15.98 60.740002 16.219999 c
63.220001 18.699999 l
63.32 18.799999 63.48 18.82 63.580002 18.719999 c
63.680004 18.619999 63.700001 18.48 63.580002 18.359999 c
58.940002 13.739999 l
58.820004 13.619999 58.760002 13.479999 58.760002 13.319999 c
58.760002 12.979999 59.040001 12.699999 59.380001 12.699999 c
60.34 12.699999 l
62.16 12.699999 63.66 11.219999 63.66 9.399999 c
63.66 7.579998 62.16 6.099999 60.34 6.099999 c
53.720001 6.099999 l
53.720001 9.399999 l
53.720001 9.739999 53.440002 9.999999 53.100002 9.999999 c
52.760002 9.999999 52.500004 9.739999 52.500004 9.399999 c
52.500004 5.479999 l
52.500004 5.159998 52.760002 4.879999 53.100002 4.879999 c
53.099998 4.88 l
h
60.360001 6.6 m
61.900002 6.6 63.16 7.86 63.16 9.4 c
63.16 10.94 61.900002 12.179999 60.360001 12.179999 c
57.02 12.179999 l
55.200001 12.179999 53.720001 13.66 53.720001 15.48 c
53.720001 19.4 l
53.720001 19.719999 53.440002 20 53.100002 20 c
52.760002 20 52.500004 19.719999 52.500004 19.4 c
52.500004 15.48 l
52.500004 12.98 54.520004 10.959999 57.020004 10.959999 c
60.360004 10.959999 l
61.240005 10.959999 61.940002 10.259999 61.940002 9.4 c
61.940002 8.52 61.240002 7.82 60.360001 7.82 c
60.02 7.82 59.760002 7.56 59.760002 7.22 c
59.760002 6.88 60.02 6.6 60.360001 6.6 c
h
69.959999 4.88 m
77.379997 4.88 l
78.18 4.88 78.839996 5.54 78.839996 6.34 c
78.839996 7.14 78.219994 7.82 77.419998 7.82 c
69.959999 7.82 l
69.659996 7.82 69.400002 8.06 69.400002 8.38 c
69.400002 8.68 69.660004 8.940001 69.959999 8.940001 c
70.299995 8.940001 70.580002 9.200001 70.580002 9.540001 c
70.580002 9.880001 70.300003 10.160001 69.959999 10.160001 c
68.979996 10.160001 68.199997 9.360001 68.199997 8.380001 c
68.199997 7.400002 68.979996 6.600001 69.959999 6.600001 c
77.379997 6.600001 l
77.519997 6.600001 77.619995 6.480001 77.619995 6.340001 c
77.619995 6.200001 77.519997 6.100001 77.379997 6.100001 c
69.959999 6.100001 l
68.699997 6.100001 67.68 7.120001 67.68 8.380001 c
67.68 9.640001 68.699997 10.660001 69.959999 10.660001 c
75.339996 10.660001 l
76.32 10.660001 77.119995 11.460001 77.119995 12.460001 c
77.119995 13.440001 76.319992 14.220001 75.339996 14.220001 c
69.959999 14.220001 l
68.699997 14.220001 67.68 15.240002 67.68 16.500002 c
67.68 17.760002 68.699997 18.780003 69.959999 18.780003 c
78.220001 18.780003 l
78.559998 18.780003 78.840004 19.060003 78.840004 19.400003 c
78.840004 19.740004 78.560005 20.000004 78.220001 20.000004 c
69.959999 20.000004 l
68.019997 20.000004 66.459999 18.440004 66.459999 16.500004 c
66.459999 14.580004 68.019997 13.000004 69.959999 13.000004 c
75.339996 13.000004 l
75.659996 13.000004 75.899994 12.760004 75.899994 12.460004 c
75.899994 12.120004 75.659996 11.880004 75.339996 11.880004 c
69.959999 11.880004 l
68.040001 11.880004 66.459999 10.300004 66.459999 8.380004 c
66.459999 6.440004 68.040001 4.880004 69.959999 4.880004 c
69.959999 4.88 l
h
69.959999 14.74 m
75.339996 14.74 l
75.679993 14.74 75.959999 15 75.959999 15.34 c
75.959999 15.68 75.68 15.96 75.339996 15.96 c
69.959999 15.96 l
69.659996 15.96 69.400002 16.200001 69.400002 16.5 c
69.400002 16.82 69.660004 17.059999 69.959999 17.059999 c
70.299995 17.059999 70.559998 17.34 70.559998 17.68 c
70.559998 18 70.299995 18.280001 69.959999 18.280001 c
68.979996 18.280001 68.18 17.480001 68.18 16.5 c
68.18 15.519999 68.980003 14.74 69.959999 14.74 c
h
87.139999 4.88 m
100 4.88 l
100.32 4.88 100.599998 5.16 100.599998 5.48 c
100.599998 5.82 100.32 6.1 100 6.1 c
87.139999 6.1 l
86.82 6.1 86.540001 5.82 86.540001 5.48 c
86.540001 5.16 86.82 4.88 87.139999 4.88 c
h
87.139999 6.6 m
91.540001 6.6 l
92.520004 6.6 93.32 7.4 93.32 8.38 c
93.32 19.400002 l
93.32 19.720001 93.040001 20.000002 92.699997 20.000002 c
92.379997 20.000002 92.099998 19.720001 92.099998 19.400002 c
92.099998 8.380001 l
92.099998 8.080001 91.839996 7.820001 91.540001 7.820001 c
87.139999 7.820001 l
86.82 7.820001 86.540001 7.560001 86.540001 7.220001 c
86.540001 6.880001 86.82 6.600001 87.139999 6.600001 c
87.139999 6.6 l
h
95.599998 6.6 m
100 6.6 l
100.32 6.6 100.599998 6.88 100.599998 7.22 c
100.599998 7.56 100.32 7.82 100 7.82 c
95.599998 7.82 l
95.299995 7.82 95.040001 8.08 95.040001 8.38 c
95.040001 19.400002 l
95.040001 19.720001 94.779999 20.000002 94.440002 20.000002 c
94.100006 20.000002 93.82 19.720001 93.82 19.400002 c
93.82 8.380001 l
93.82 7.400001 94.620003 6.600001 95.599998 6.600001 c
95.599998 6.6 l
h
109.919998 6.38 m
111.540001 6.38 113.059998 7 114.199997 8.14 c
115.339996 9.3 115.959999 10.820001 115.959999 12.440001 c
115.959999 12.76 115.699997 13.040001 115.360001 13.040001 c
115.040001 13.040001 114.760002 12.760001 114.760002 12.440001 c
114.760002 11.14 114.260002 9.92 113.340004 9 c
112.420006 8.1 111.200005 7.58 109.920006 7.58 c
108.620003 7.58 107.400009 8.1 106.480003 9 c
105.560005 9.92 105.060005 11.14 105.060005 12.440001 c
105.060005 13.240001 104.400002 13.92 103.580002 13.92 c
102.760002 13.92 102.099998 13.24 102.099998 12.440001 c
102.099998 10.34 102.919998 8.380001 104.379997 6.920001 c
107.439995 3.860001 112.379997 3.860001 115.439995 6.920001 c
116.919998 8.380001 117.719994 10.34 117.719994 12.440001 c
117.719994 14.520001 116.919991 16.479999 115.439995 17.960001 c
113.959999 19.440002 111.999992 20.240002 109.919998 20.240002 c
109.580002 20.240002 109.299995 19.980001 109.299995 19.640001 c
109.299995 19.300001 109.579994 19.040001 109.919998 19.040001 c
111.68 19.040001 113.339996 18.34 114.580002 17.1 c
115.820007 15.860001 116.520004 14.200001 116.520004 12.440001 c
116.520004 10.68 115.820007 9.020001 114.580002 7.760001 c
112 5.200001 107.82 5.200001 105.240005 7.760001 c
104.000008 9.020001 103.320007 10.68 103.320007 12.440001 c
103.320007 12.620001 103.420006 12.740001 103.600006 12.740001 c
103.76001 12.740001 103.860008 12.64 103.860008 12.440001 c
103.860008 10.820001 104.480011 9.3 105.62001 8.14 c
106.76001 7.000001 108.300011 6.38 109.920013 6.38 c
109.919998 6.38 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
